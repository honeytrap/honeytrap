// Copyright 2017 The Upspin Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build gendoc

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"os"
	"os/exec"
	"sort"
)

func init() {
	commands["gendoc"] = (*State).gendoc
}

func (s *State) gendoc(args ...string) {
	names := []string{"", "-help"}
	for name := range commands {
		if name == "gendoc" {
			continue
		}
		names = append(names, name)
	}
	sort.Strings(names)

	var b bytes.Buffer
	fmt.Fprintln(&b, `// Copyright 2017 The Upspin Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by upspin gendoc. DO NOT EDIT.
// After editing a command's usage, run 'go generate' to update this file.

/*
`)
	for _, name := range names {
		var cmd *exec.Cmd
		if name == "" {
			cmd = exec.Command(os.Args[0])
		} else {
			cmd = exec.Command(os.Args[0], name, "-help")
		}
		var out bytes.Buffer
		cmd.Stdout = &out
		cmd.Stderr = &out
		cmd.Run() // should exit with status 2

		if name != "" && name != "-help" {
			fmt.Fprintf(&b, "\nSub-command %s\n\n", name)
		}
		fmt.Fprintf(&b, "%s\n\n", out.Bytes())
	}
	fmt.Fprintln(&b, "*/\npackage main")

	out, err := format.Source(b.Bytes())
	if err != nil {
		s.exit(err)
	}
	err = ioutil.WriteFile("doc.go", out, 0644)
	if err != nil {
		s.exit(err)
	}
}
