package com

const (
	Request        = 0x01
	Ack            = 0x02
	AckData        = 0x03
	UserData       = 0x07
	S7ConReq       = 0xf0
	S7DataRequest  = 0x04
	S7DataResponse = 0x08
	CR             = 0xe0
	CC             = 0xd0
	COTPData       = 0xf0
)

type Packet struct {
	TPKT TPKTPacket
	COTP COTPPacket
	S7   S7Packet
}

type S7Packet struct {
	Header    S7Header
	Parameter S7Parameter
	Data      S7Data
}

type S7Header struct {
	ProtocolID  uint8
	MessageType uint8
	Reserved    uint16
	PDURef      uint16
	ParamLength uint16
	DataLength  uint16
	ErrorClass  uint8
	ErrorCode   uint8
}

type S7Parameter struct {
	SetupCom S7SetupCom
	UserData S7UserData
}

type S7Data struct {
	ReturnCode    uint8
	TransportSize uint8
	Length        uint16
	SZLID         uint16
	SZLIndex      uint16
	SZLListLength uint16
	SZLListCount  uint16
	SZLDataTree   []SLZDataTree
}

type S7SetupCom struct {
	Function      uint8
	Reserved      uint8
	MaxAmQCalling uint16
	MaxAmQCalled  uint16
	PDULength     uint16
}

type S7UserData struct {
	ParamHead      uint32
	ParamLength    uint8
	Method         uint8
	MethodType     uint8
	MethodFunction uint8
	SubFunction    uint8
	SequenceNum    uint8
	DataRefNum     uint8
	LastDataUnit   uint8
	ErrorCode      uint16
}

type SLZDataTree struct {
	Index  uint16
	MlfB   []byte
	BGType uint16
	Ausbg  uint16
	Ausbe  uint16
}

func (sd *S7Data) AddSLZDataTree(dt SLZDataTree) {
	sd.SZLDataTree = append(sd.SZLDataTree, dt)
}

type TPKTPacket struct {
	Version  uint8
	Reserved uint16
	Length   uint8
}

type COTPPacket struct {
	Length  uint8
	PDUType uint8
	DestRef uint8
}

type Cotpstruc struct {
	ConnConfirm []byte
	ConnReqHead []byte
	Default     []byte
}

type S7commstruc struct {
	SetupComReq  []byte
	SetupComConf []byte
	Error        []byte
}

type Unknownstruc struct {
	Shodan []byte
}

type Scannerstruc struct {
	PrimaryReq         []byte
	SecondaryReq       []byte
	PrimaryBasicResp   []byte
	SecondaryBasicResp []byte
}

var Scan = Scannerstruc{
	PrimaryReq:   []byte{0x03, 0x00, 0x00, 0x21, 0x02, 0xf0, 0x80, 0x32, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x01, 0x12, 0x04, 0x11, 0x44, 0x01, 0x00, 0xff, 0x09, 0x00, 0x04, 0x00, 0x11, 0x00, 0x01},
	SecondaryReq: []byte{0x03, 0x00, 0x00, 0x21, 0x02, 0xf0, 0x80, 0x32, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x01, 0x12, 0x04, 0x11, 0x44, 0x01, 0x00, 0xff, 0x09, 0x00, 0x04, 0x00, 0x1c, 0x00, 0x01},
	//PrimaryBasicResp:   []byte{0x03, 0x00, 0x00, 0x99, 0x02, 0xf0, 0x80, 0x32, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x7c, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xff, 0x09, 0x00, 0x78, 0x00, 0x11, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x04, 0x00, 0x01, 0x36, 0x45, 0x53, 0x37, 0x20, 0x33, 0x31, 0x34, 0x2d, 0x36, 0x45, 0x48, 0x30, 0x34, 0x2d, 0x30, 0x41, 0x42, 0x30, 0x20, 0x00, 0xc0, 0x00, 0x02, 0x00, 0x01, 0x00, 0x06, 0x36, 0x45, 0x53, 0x37, 0x20, 0x33, 0x31, 0x34, 0x2d, 0x36, 0x45, 0x48, 0x30, 0x34, 0x2d, 0x30, 0x41, 0x42, 0x30, 0x20, 0x00, 0xc0, 0x00, 0x02, 0x00, 0x01, 0x00, 0x07, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0xc0, 0x56, 0x09, 0x09, 0x09, 0x00, 0x81, 0x42, 0x6f, 0x6f, 0x74, 0x20, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x41, 0x20, 0x09, 0x09},

	PrimaryBasicResp:   []byte{0x03, 0x00, 0x00, 0x7d, 0x02, 0xf0, 0x80, 0x32, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x60, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xff, 0x09, 0x00, 0x5c, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1c, 0x00, 0x03, 0x00, 0x01, 0x36, 0x45, 0x53, 0x37, 0x20, 0x32, 0x31, 0x34, 0x2d, 0x31, 0x41, 0x47, 0x33, 0x31, 0x2d, 0x30, 0x58, 0x42, 0x30, 0x20, 0x20, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x06, 0x36, 0x45, 0x53, 0x37, 0x20, 0x32, 0x31, 0x34, 0x2d, 0x31, 0x41, 0x47, 0x33, 0x31, 0x2d, 0x30, 0x58, 0x42, 0x30, 0x20, 0x20, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x07, 0x36, 0x45, 0x53, 0x37, 0x20, 0x32, 0x31, 0x34, 0x2d, 0x31, 0x41, 0x47, 0x33, 0x31, 0x2d, 0x30, 0x58, 0x42, 0x30, 0x20, 0x20, 0x20, 0x56, 0x03, 0x00, 0x01},
	SecondaryBasicResp: []byte{0x03, 0x00, 0x00, 0x7d, 0x02, 0xf0, 0x80, 0x32, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x60, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xff, 0x09, 0x00, 0x5c, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1c, 0x00, 0x03, 0x00, 0x01, 0x36, 0x45, 0x53, 0x37, 0x20, 0x32, 0x31, 0x34, 0x2d, 0x31, 0x41, 0x47, 0x33, 0x31, 0x2d, 0x30, 0x58, 0x42, 0x30, 0x20, 0x20, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x06, 0x36, 0x45, 0x53, 0x37, 0x20, 0x32, 0x31, 0x34, 0x2d, 0x31, 0x41, 0x47, 0x33, 0x31, 0x2d, 0x30, 0x58, 0x42, 0x30, 0x20, 0x20, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x07, 0x36, 0x45, 0x53, 0x37, 0x20, 0x32, 0x31, 0x34, 0x2d, 0x31, 0x41, 0x47, 0x33, 0x31, 0x2d, 0x30, 0x58, 0x42, 0x30, 0x20, 0x20, 0x20, 0x56, 0x03, 0x00, 0x01},

	//	SecondaryBasicResp: []byte{0x03, 0x00, 0x00, 0xf7, 0x02, 0xf0, 0x80, 0x32, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xda, 0x00, 0x01, 0x12, 0x08, 0x12, 0x84, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0xff, 0x09, 0x00, 0xd6, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x22, 0x00, 0x0a, 0x00, 0x01, 0x44, 0x75, 0x74, 0x63, 0x68, 0x53, 0x65, 0x63, 0x20, 0x50, 0x4c, 0x43, 0x20, 0x2f, 0x20, 0x53, 0x37, 0x2d, 0x31, 0x36, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x50, 0x4c, 0x43, 0x5f, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x53, 0x69, 0x65, 0x6d, 0x65, 0x6e, 0x73, 0x20, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x53, 0x20, 0x43, 0x2d, 0x43, 0x4e, 0x54, 0x57, 0x36, 0x34, 0x35, 0x32, 0x32, 0x30, 0x31, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x43, 0x50, 0x55, 0x20, 0x33, 0x31, 0x34, 0x43, 0x2d, 0x32, 0x20, 0x50, 0x4e, 0x2f, 0x44, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08},
}

var Cotp = Cotpstruc{
	ConnConfirm: []byte{0x03, 0x00, 0x00, 0x16, 0x11, 0xd0, 0x00, 0x05, 0x00, 0x0b, 0x00, 0xc0, 0x01, 0x0a, 0xc1, 0x02, 0x01, 0x00, 0xc2, 0x02, 0x02, 0x00},
	ConnReqHead: []byte{0x03, 0x00, 0x00, 0x16, 0x11, 0xe0},
	Default:     []byte{0x02, 0xf0, 0x80},
}

var S7comm = S7commstruc{

	//Receiving from scanners
	SetupComReq: []byte{0x03, 0x00, 0x00, 0x19, 0x02, 0xf0, 0x80, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0xe0},
	//Repy to scanners
	SetupComConf: []byte{0x03, 0x00, 0x00, 0x1b, 0x02, 0xf0, 0x80, 0x32, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0xf0},
}
